@page "/AvailableStocks"
@using BlazorPresentationServer.Services
@using BlazorPresentationServer.Authentication
@using BlazorPresentationServer.Model
@using BlazorPresentationServer.Components
@using System.Globalization
@inject IStockService StockService
@inject DialogService DialogService
@inject ITransactionService TransactionService
@inject ICachedAccount CachedAccount
@inject AuthenticationStateProvider StateProvider
@inject NotificationService NotificationService



<div class="card">
    <h4 class="card-header" style="background-color: #415A77; color: white ">Available Stocks</h4>
    <div class="card-body">
        <label>
            Filter By Name:
            <input/>
        </label>
        <label>
            Enter Stock Symbol:
            <input @bind="stockSymbol"/>
            <button @onclick="OnSearchAsync">Search</button>
        </label>
        @if (visible)
        {
          <Accordion GnrlStock="rndmStock" GnrlStockList="randomStock"></Accordion>  
        }
        <Accordion GnrlStock = "tslaStock" GnrlStockList="teslaStock"></Accordion>
        <Accordion GnrlStock = "msftStock" GnrlStockList="microStock"></Accordion>
        
    </div>
</div>


@code {
    Stock tslaStock = new();
    Stock msftStock = new();
    Stock rndmStock = new();

    Stock[] teslaStock = new Stock[30];
    Stock[] microStock = new Stock[30];
    Stock[] randomStock = new Stock[30];

    string stockSymbol = "";
    decimal total;

    bool smooth;
    bool orderOpened;
    bool visible;

    protected override async Task OnInitializedAsync()
    {
        tslaStock = await StockService.GetStockAsync("TSLA");
        teslaStock = await StockService.GetStockPriceListAsync("TSLA");
        
        msftStock = await StockService.GetStockAsync("MSFT");
        microStock = await StockService.GetStockPriceListAsync("MSFT");
    }

    protected override void OnInitialized()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
    }

    void Close(dynamic result)
    {
        if (result.Equals("true"))
        {
            Console.WriteLine("TRUEEE");
        }
        else
        {
            Console.WriteLine("Falseee");
        }
        Console.WriteLine("Dialog closed");
    }

    public async Task OnSearchAsync()
    {
        try
        {
            rndmStock = await StockService.GetStockAsync(stockSymbol.ToUpper());
            randomStock = await StockService.GetStockPriceListAsync(stockSymbol.ToUpper());
            visible = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Warning, Summary = "Error", Detail = "Invalid Stock Symbol",
                Duration = 4000});
        }
        
    }
}