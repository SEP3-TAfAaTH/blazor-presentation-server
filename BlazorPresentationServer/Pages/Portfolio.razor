@page "/Portfolio"
@using BlazorPresentationServer.Model
@using BlazorPresentationServer.Authentication
@using BlazorPresentationServer.Services
@inject NavigationManager NavigationManager;
@inject DialogService DialogService
@inject ICachedAccount CachedAccount
@inject ITransactionService TransactionService
@inject IStockService StockService

<div class="card">
    <h4 class="card-header">Portfolio</h4>
    <div class="card-body">
        @if (ownedStocks == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else if (!ownedStocks.Any())
        {
            <p>
                <em>You do not have any stocks. Go buy some.</em>
                <button class="btn btn-primary" @onclick="NavigateToAvailableStock"> Navigate to the Counter component </button>
            </p>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th></th>
                    <th></th>
                    @* <th>Name</th> *@
                    <th>Symbol</th> 
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Purchase Price</th>
                    <th>Total Value</th>
                    @* <th>TodaysChange</th>*@
                    <th>Total Gain Loss</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in ownedStocks)
                {
                    <tr>
                        <td>
                            <RadzenButton Text="More Details" Click=@(args => ShowInlineDialog(item)) />
                        </td>
                        <td>
                            <RadzenButton Text="Sell" Click=@(args => ShowSellPopUp(item)) />
                        </td>
                        @* <td>@item.Name</td> *@
                        <td>@item.Symbol</td>
                        <td>@item.Quantity</td>
                        <td>$@item.Price</td>
                        <td>$@item.PurchasePrice</td>
                        <td>$@item.GetTotalValue()</td>
                        @* <td>@item.TodaysChange</td> *@
                        <td>$@item.GetGainLoss()</td>

                    </tr>
                }
                </tbody>
            </table>
        }

    </div>
</div>

@code {
    private IList<OwnedStock> ownedStocks = new List<OwnedStock>();
    private List<Transaction> transactions;

    Transaction newTransaction = new Transaction();
    OwnedStock banana = new OwnedStock();
    OwnedStock apple = new OwnedStock();
    
    
    
    protected override async Task OnInitializedAsync()
    {
        transactions = new List<Transaction>();
        //transactions = await TransactionService.GetAllTransactionsByAccountId(CachedAccount.GetCachedAccount().Id);
        banana.Name = "Banana";
        banana.Symbol = "BNNA";
        banana.Price = 1;
        ownedStocks.Add(banana);
        
        apple.Name = "Apple";
        apple.Symbol = "APPL";
        apple.Price = 2;
        ownedStocks.Add(apple);
        foreach (var t in transactions)
        {
           
            
            bool unique = true;
            foreach (var owned in ownedStocks)
            {
                if (t.StockSymbol.Equals(owned.Symbol))
                {
                    unique = false;
                    break;
                }
            }
            if (unique)
            {
                double price = await StockService.GetStockPriceAsync(t.StockSymbol);
                OwnedStock stock = new OwnedStock
                {
                    Symbol = t.StockSymbol,
                    Quantity = t.Quantity,
                    Price = price,
                    PurchasePrice = (double) t.Price,
                    TotalCost = (double) (t.Quantity * t.Price)
                };
                ownedStocks.Add(stock);
            }
            else
            {
                var stock = ownedStocks.First(s => s.Symbol.Equals(t.StockSymbol));
                if (t.IsBuy)
                {
                    stock.Quantity += t.Quantity;
                    stock.TotalCost += (double) (t.Quantity * t.Price);
                }
                else
                {
                    stock.Quantity -= t.Quantity;
                    stock.TotalCost -= (double) (t.Quantity * t.Price);
                }
            }
            
        }
    }

    private void NavigateToAvailableStock()
    {
        NavigationManager.NavigateTo("AvailableStocks");    }

    
    
    int orderID = 10248;
    bool orderOpened;

    protected override void OnInitialized()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
        
    }

    void Close(dynamic result)
    {
        Console.WriteLine("Dialog closed");
    }

    async Task ShowInlineDialog(OwnedStock stockItem) => await DialogService.OpenAsync(stockItem.Name + " (" + stockItem.Symbol +")", ds =>
        @<div>
            
            <div class="row">
                <div class="col-md-12">
                    <table class="table">
                                    <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Symbol</th>
                                        <th>Type</th>
                                        <th>Quantity</th>
                                        <th>Purchase Price</th>
                                        <th>Total Price</th>
                                    </tr>
                                    </thead>
                    <tbody>
                    @foreach (var transactionItem in transactions.Where(t => t.StockSymbol.Equals(stockItem.Symbol)))
                    {
                        <tr>
                            <td>@transactionItem.DateCreated</td>
                            <td>@stockItem.Symbol</td>
                            @if (transactionItem.IsBuy)
                            {
                                <td>Buy</td>
                            }
                            else
                            {
                                <td>Sell</td>
                            }
                            <td>@transactionItem.Quantity</td>
                            <td>@transactionItem.Price</td>
                            <td>@(transactionItem.Price*transactionItem.Quantity)</td>
                        </tr>
                    }
                    </tbody>
                    </table>
                    <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="margin-bottom: 10px; width: 150px"/>
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px"/>
                    <RadzenButton Text="Refresh" Click="(() => { orderID = 10249; ds.Refresh(); })" ButtonStyle="ButtonStyle.Info" Style="margin-bottom: 10px; width: 150px"/>

                </div>
            </div>
        </div>);
    
    
    async Task ShowSellPopUp(OwnedStock stockItem) => await DialogService.OpenAsync(stockItem.Name + " (" + stockItem.Symbol +")", ds =>
        @<div>
            <label>How many stocks do you want to sell? </label> <br>
             <div><RadzenNumeric TValue="int" Change="((args) => OnNumberChanged(args, stockItem)) "/> </div> 
             @* <input type="number"  @bind="newTransaction.Quantity">  *@
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text="Sell" Click="(() => CreateTransaction(stockItem))"></RadzenButton>

        </div>);
    
    private void CreateTransaction( OwnedStock stock)
    {
        
        newTransaction.StockSymbol = stock.Symbol;
        Console.WriteLine(newTransaction.StockSymbol + "  "+ newTransaction.Quantity);
        // transaction.Account = CachedAccount.GetCachedAccount();
        // transaction.Price = (decimal) stock.Price;
        // transaction.IsBuy = true;
        // transaction.StockSymbol = stock.Symbol;
        // try
        // {
        //     TransactionService.BuyStock(transaction);
        //     DialogService.Confirm("Your purchase is successful", "Success", new ConfirmOptions() {OkButtonText = "Great",CancelButtonText = "Cancel"  });
        // }
        // catch (Exception e)
        // {
        //     Console.WriteLine(e);
        //     DialogService.Confirm("Transaction failed", "Failure", new ConfirmOptions() {OkButtonText = "Fuck",CancelButtonText = "Cancel"  });
        //
        // }
        
        
        
    }
    
    
    private void OnNumberChanged(int args, OwnedStock stock)
    {
        newTransaction.Quantity = args;
        Console.WriteLine("  "+ newTransaction.Quantity);

    }
}
