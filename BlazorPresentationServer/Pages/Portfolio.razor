@page "/Portfolio"
@using BlazorPresentationServer.Authentication
@using BlazorPresentationServer.Model
@using BlazorPresentationServer.Services
@inject NavigationManager NavigationManager;
@inject DialogService DialogService
@inject ICachedAccount CachedAccount
@inject AuthenticationStateProvider StateProvider
@inject ITransactionService TransactionService
@inject IStockService StockService
@inject NotificationService NotificationService
@inject IAccountService _accountService

<div class="card">
    <h4 class="card-header" style="background-color: #415A77; color: white ">Balance</h4>
    <div class="card-body">
        <div style="display: flex; align-content: center;">
            <textarea @bind="balance" disabled style="font-size: 50px; height: 80px; text-align: right; float: left;"></textarea>
            <p style="font-size: 50px; color: #415A77; margin-left: 20px; "> DKK</p>
        </div>
    </div>
    <h4 class="card-header">Portfolio</h4>
    <div class="card-body">
        @if (ownedStocks == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else if (!ownedStocks.Any())
        {
            <p>
                <em>You do not have any stocks. Go buy some.</em>
                <button class="btn btn-primary" @onclick="NavigateToAvailableStock"> Navigate to the Counter component </button>
            </p>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th></th>
                    <th></th>
                    @* <th>Name</th> *@
                    <th>Symbol</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    @* <th>Purchase Price</th> *@
                    <th>Total Value</th>
                    @* <th>TodaysChange</th>*@
                    <th>Total Gain Loss</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in ownedStocks)
                {
                    <tr>
                        <td>
                            <RadzenButton Text="More Details" Click=@(args => ShowInlineDialog(item))></RadzenButton>
                        </td>
                        <td>
                            <RadzenButton Text="Sell" Click=@(args => ShowSellPopUp(item))></RadzenButton>
                        </td>
                        @* <td>@item.Name</td> *@
                        <td>@item.Symbol</td>
                        <td>@item.Quantity</td>
                        <td>$@item.Price</td>
                        @* <td>$@item.PurchasePrice</td> *@
                        <td>$@item.GetTotalValue()</td>
                        @* <td>@item.TodaysChange</td> *@
                        <td>$@item.GetGainLoss()</td>
                    </tr>
                }
                </tbody>
            </table>
        }

    </div>
    <h4 class="card-header">Reset portfolio</h4>
    <div class="card-body">
        <button class="btn btn-danger" @onclick="ResetPortfolio">I want to reset my portfolio</button>
    </div>
</div>

@code {
    decimal balance;
    private readonly IList<OwnedStock> ownedStocks = new List<OwnedStock>();
    private List<Transaction> transactions;
    private List<Transaction> newTransactions;

    Transaction newTransaction;


    protected override async Task OnInitializedAsync()
    {
        // balance = ((CustomAuthenticationProvider) StateProvider).cachedAccount.Balance;
        balance = CachedAccount.GetCachedAccount().Balance;
        transactions = new List<Transaction>();
        newTransactions = new List<Transaction>();
        // transactions = await TransactionService.GetAllTransactionsByAccountId(((CustomAuthenticationProvider) StateProvider).cachedAccount.Id);
        transactions = await TransactionService.GetAllTransactionsByAccountId(CachedAccount.GetCachedAccount().Id);
        SortTransactions();
    }

    private async void SortTransactions()
    {
        foreach (var t in transactions)
        {
            var unique = true;
            foreach (var owned in ownedStocks)
            {
                if (t.StockSymbol.Equals(owned.Symbol))
                {
                    unique = false;
                    break;
                }
            }
            if (unique)
            {
                var price = await StockService.GetStockPriceAsync(t.StockSymbol);
                var stock = new OwnedStock
                {
                    Symbol = t.StockSymbol,
                    Quantity = t.Quantity,
                    Price = price,
                    PurchasePrice = (double) t.Price,
                    TotalCost = (double) (t.Quantity * t.Price)
                };
                ownedStocks.Add(stock);
                newTransactions.Add(new Transaction {StockSymbol = stock.Symbol});
            }
            else
            {
                var stock = ownedStocks.First(s => s.Symbol.Equals(t.StockSymbol));
                if (t.IsBuy)
                {
                    stock.Quantity += t.Quantity;
                    stock.TotalCost += (double) (t.Quantity * t.Price);
                }
                else
                {
                    stock.Quantity -= t.Quantity;
                    stock.TotalCost -= (double) (t.Quantity * t.Price);
                }
            }
        }
        StateHasChanged();
    }

    private void NavigateToAvailableStock()
    {
        NavigationManager.NavigateTo("AvailableStocks");
    }


    int orderID = 10248;
    bool orderOpened;

    protected override void OnInitialized()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
    }

    void Close(dynamic result)
    {
        Console.WriteLine("Dialog closed");
    }

    async Task ShowInlineDialog(OwnedStock stockItem) => await DialogService.OpenAsync(stockItem.Name + " (" + stockItem.Symbol + ")", ds =>
        @<div>

            <div class="row">
                <div class="col-md-12">
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Date</th>
                            <th>Symbol</th>
                            <th>Type</th>
                            <th>Quantity</th>
                            <th>Purchase Price</th>
                            <th>Total Price</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var transactionItem in transactions.Where(t => t.StockSymbol.Equals(stockItem.Symbol)))
                        {
                            <tr>
                                <td>@transactionItem.DateCreated</td>
                                <td>@stockItem.Symbol</td>
                                @if (transactionItem.IsBuy)
                                {
                                    <td>Buy</td>
                                }
                                else
                                {
                                    <td>Sell</td>
                                }
                                <td>@transactionItem.Quantity</td>
                                <td>@transactionItem.Price</td>
                                <td>@(transactionItem.Price * transactionItem.Quantity)</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                    <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="margin-bottom: 10px; width: 150px"/>
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px"/>
                    <RadzenButton Text="Refresh" Click="() => { orderID = 10249; ds.Refresh(); }" ButtonStyle="ButtonStyle.Info" Style="margin-bottom: 10px; width: 150px"/>
                </div>
            </div>
        </div>);


    async Task ShowSellPopUp(OwnedStock stockItem) => await DialogService.OpenAsync(stockItem.Name + " (" + stockItem.Symbol + ")", ds =>
        @<div>
            <label>How many stocks do you want to sell? </label> <br>
            <div>
                <RadzenNumeric TValue="int" Change="args => OnNumberChanged(args, stockItem)"/>
            </div>
            @* <input type="number"  @bind="newTransaction.Quantity">  *@
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text="Sell" Click="() => CreateTransaction(stockItem)"></RadzenButton>
        </div>);

    private void CreateTransaction(OwnedStock stock)
    {
        var transaction = newTransactions.First(s => s.StockSymbol.Equals(stock.Symbol));
        if (transaction.Quantity > stock.Quantity || transaction.Quantity < 1)
        {
            DialogService.Confirm("Invalid quantity", "Error", new ConfirmOptions {OkButtonText = "Ok", CancelButtonText = "Cancel"});
        }
        else
        {
            transaction.Price = (decimal) stock.Price;
            transaction.IsBuy = false;
            
            // ((CustomAuthenticationProvider) StateProvider).cachedAccount.Balance += transaction.GetTotal();
            // transaction.Account = ((CustomAuthenticationProvider) StateProvider).cachedAccount;

            CachedAccount.GetCachedAccount().Balance += transaction.GetTotal();
            transaction.Account = CachedAccount.GetCachedAccount();
            try
            {
                TransactionService.CreateTransactionAsync(transaction);
                DialogService.Confirm("Your purchase is successful", "Success", new ConfirmOptions {OkButtonText = "Great", CancelButtonText = "Cancel"});
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                // ((CustomAuthenticationProvider) StateProvider).cachedAccount.Balance -= transaction.GetTotal();
                CachedAccount.GetCachedAccount().Balance -= transaction.GetTotal();
                DialogService.Confirm("Transaction failed", "Failure", new ConfirmOptions {OkButtonText = "Fuck", CancelButtonText = "Cancel"});
            }
        }
    }


    private void OnNumberChanged(int args, OwnedStock stock)
    {
        var transaction = newTransactions.First(s => s.StockSymbol.Equals(stock.Symbol));
        transaction.Quantity = args;
        Console.WriteLine(transaction.Quantity);
    }

    private async Task ResetPortfolio()
    {
        var result = await DialogService.Confirm("Your portfolio will reset", "Are you sure?", new ConfirmOptions {OkButtonText = "Agree", CancelButtonText = "Cancel"});
        Console.WriteLine(result.Value);
        if (result ?? true)
        {
            CachedAccount.GetCachedAccount().Balance = 10000;
            await _accountService.EditAccountAsync(CachedAccount.GetCachedAccount());
            await TransactionService.DeleteAllTransactionsAsync(CachedAccount.GetCachedAccount().Id);
            
            // ((CustomAuthenticationProvider) StateProvider).cachedAccount.Balance = 10000;
            // await _accountService.EditAccountAsync(((CustomAuthenticationProvider) StateProvider).cachedAccount);
            // await TransactionService.DeleteAllTransactionsAsync(((CustomAuthenticationProvider) StateProvider).cachedAccount.Id);
            
            NotificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "Reset", Detail = "Your portfolio has been reset", Duration = 4000});
        }
    }

}