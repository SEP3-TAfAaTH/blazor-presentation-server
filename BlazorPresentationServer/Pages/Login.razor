@page "/Login"
@using BlazorPresentationServer.Services
@using BlazorPresentationServer.Model
@using BlazorPresentationServer.Authentication

@inject NavigationManager NavigationManager
@inject ILoginAccountService _loginAccountService
@inject AuthenticationStateProvider AuthenticationProvider


<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@validAccount" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="validAccount.Username" class="form-control"/>
                <ValidationMessage For="@(() => validAccount.Username)"/>
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="validAccount.Password" class="form-control"/>
                <ValidationMessage For="@(() => validAccount.Password)"/>
            </div>
            
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            <NavLink href="Register" class="btn btn-link">Are you new? Register here</NavLink>
            <label style="color: red"> @errorMessage </label>
        </EditForm>
    </div>
</div>
<AuthorizeView Policy="LoggedIn">
    <Authorized>
        <button @onclick="Logout">Logout</button>
    </Authorized>
</AuthorizeView>


@code {
    private readonly Account validAccount = new();
    private bool loading;
    private string errorMessage;

    private async Task OnValidSubmit()
    {
        try
        {
            await ((CustomAuthenticationProvider)AuthenticationProvider).ValidateLoginAsync(validAccount);
            //await _loginAccountService.LoginAccountAsync(validAccount);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            errorMessage = e.Message;
        }
    }

    private void Logout()
    {
        ((CustomAuthenticationProvider) AuthenticationProvider).Logout();
        
    }

}